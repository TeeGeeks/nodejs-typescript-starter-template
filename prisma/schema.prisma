// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  email    String   @unique
  password String
  role     UserRole
  name     String
  phone    String?
  gender   String?
  image    String?

  schoolId   String?
  schoolName String?

  teacher   Teacher?
  parent    Parent?
  student   Student?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RefreshToken RefreshToken[]
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id            String   @id @default(cuid())
  fullName      String
  email         String   @unique
  phone         String
  country       String
  schoolName    String   @unique
  schoolWebsite String
  students      Int
  role          String
  media         String
  message       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("contacts")
}

model School {
  id        String   @id @default(cuid()) // or use @default(uuid()) for UUID
  name      String
  logo      String?
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  students                 Student[]
  parents                  Parent[]
  teachers                 Teacher[]
  classes                  Class[]
  sections                 Section[]
  Department               Department[]
  Subject                  Subject[]
  TeacherSubjectAllocation TeacherSubjectAllocation[]

  @@map("schools")
}

model Class {
  id       String    @id @default(cuid())
  slug     String    @unique
  title    String
  schoolId String // Foreign key to School
  school   School    @relation(fields: [schoolId], references: [id], onDelete: Cascade) // Cascade on delete
  sections Section[] // One-to-many relationship: a class can have multiple sections
  students Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("classes")
}

model Section {
  id        String    @id @default(cuid())
  slug      String    @unique
  title     String
  classId   String // Foreign key to Class
  schoolId  String // Foreign key to School
  class     Class     @relation(fields: [classId], references: [id], onDelete: Cascade) // Cascade on delete
  school    School    @relation(fields: [schoolId], references: [id], onDelete: Cascade) // Cascade on delete
  students  Student[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // Teacher Teacher[]

  @@map("sections")
}

model Parent {
  id            String  @id @default(cuid()) // Unique identifier with auto-generation
  title         String // Title (e.g., Mr., Mrs., etc.)
  firstName     String // Parent's first name
  lastName      String // Parent's last name
  email         String  @unique // Parent's email (unique)
  relationship  String // Relationship to the child (e.g., father, mother)
  NIN           String  @unique // National Identification Number (unique)
  phone         String? // Phone number
  nationality   String // Nationality
  state         String? // State of residence
  whatsappNo    String? // WhatsApp number
  religion      String // Religion
  password      String // Password (hashed)
  contactMethod String? // Preferred contact method
  occupation    String? // Occupation
  address       String // Address
  parentImgUrl  String? // URL to parent image

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  schoolId  String // Foreign key to School
  school    School    @relation(fields: [schoolId], references: [id], onDelete: Cascade) // Cascade on delete
  students  Student[] // One-to-many relationship: Parent to Students
  createdAt DateTime  @default(now()) // Timestamp when the record is created
  updatedAt DateTime  @updatedAt // Timestamp when the record is last updated

  @@map("parents")
}

model Student {
  id                 String    @id @default(cuid())
  name               String
  surname            String
  otherNames         String
  email              String    @unique
  parentId           String
  classId            String
  sectionId          String
  //schoolId           String   // Foreign key to School
  parentName         String?
  classTitle         String?
  sessionTitle       String?
  studentType        String?   @default("PS")
  gender             String
  dob                DateTime?
  regNo              String    @unique
  phone              String?
  password           String
  nationality        String
  state              String?
  birthCertificateNo String    @unique
  religion           String
  rollNo             String    @unique
  admissionDate      DateTime
  address            String
  imgUrl             String?

  // Relations
  parent   Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade) // Cascade on delete
  class    Class   @relation(fields: [classId], references: [id], onDelete: Cascade) // Cascade on delete
  section  Section @relation(fields: [sectionId], references: [id], onDelete: Cascade) // Cascade on delete
  school   School  @relation(fields: [schoolId], references: [id], onDelete: Cascade) // Cascade on delete
  schoolId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([parentId])
  @@index([classId])
  @@index([sectionId])
  // @@index([schoolId])
  @@map("students") // Creates table named 'students' instead of 'Student'
}

model Department {
  id       String    @id @default(cuid())
  name     String // E.g., "Science", "Arts", "Commercial"
  slug     String    @unique
  teachers Teacher[]
  subjects Subject[]

  budget     Float?
  budgetYear String?

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade) // Cascade on delete
  schoolId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("departments")
}

model Subject {
  id             String     @id @default(cuid()) // Unique subject ID
  name           String // Name of the subject
  code           String? // Optional subject code (e.g., MATH101)
  shortname      String? // Optional short name for the subject
  category       String? // Category of the subject (Core, Elective, etc.)
  type           String? // Type of subject (Theory, Practical)
  marks          Int? // Total marks for the subject
  passingMarks   Int? // Passing marks for the subject
  departmentId   String // Reference to department
  department     Department @relation(fields: [departmentId], references: [id]) // Relation to Department model
  departmentName String // Name of the department
  slug           String     @unique // URL-friendly identifier for the subject
  createdAt      DateTime   @default(now()) // Created timestamp
  updatedAt      DateTime   @updatedAt // Updated timestamp

  // Additional properties
  active       Boolean @default(true) // Whether the subject is active
  optional     Boolean @default(false) // Whether the subject is optional
  hasTheory    Boolean @default(true) // Does the subject have a theory component
  hasPractical Boolean @default(false) // Does the subject have a practical component
  labRequired  Boolean @default(false) // Does the subject require a lab

  teachers                 Teacher[]                  @relation("TeacherSubject")
  school                   School                     @relation(fields: [schoolId], references: [id], onDelete: Cascade) // Cascade on delete
  schoolId                 String
  TeacherSubjectAllocation TeacherSubjectAllocation[]

  @@map("subjects") // Custom table name in the database
}

model Teacher {
  id                String      @id @default(cuid()) // Unique teacher ID
  firstName         String // First name of the teacher
  lastName          String // Last name of the teacher
  email             String      @unique // Email (unique)
  phone             String? // Optional phone number
  gender            String // Gender of the teacher
  dob               DateTime? // Date of birth
  employeeId        String      @unique // Unique employee ID
  joinDate          DateTime? // Date when the teacher joined
  employmentStatus  String? // Employment status (e.g., Permanent, Contract)
  qualification     String? // Qualification details
  specialization    String? // Specialization of the teacher
  yearsOfExperience Int?        @default(0) // Years of experience
  emergencyContact  String? // Emergency contact info
  address           String? // Address of the teacher
  religion          String? // Religion
  country           String?     @default("Nigeria") // Default country is Nigeria
  departmentId      String? // Reference to department
  department        Department? @relation(fields: [departmentId], references: [id]) // Relation to Department
  departmentName    String? // Department name
  imageUrl          String? // URL of the teacher's image
  NIN               String?     @unique // National Identification Number (unique)
  password          String // Password for the teacher
  isActive          Boolean     @default(true) // Whether the teacher is active
  lastLoginAt       DateTime? // Last login timestamp

  subjectIds String[] // Array of subject IDs that the teacher handles
  subjects   Subject[] @relation("TeacherSubject")
  school     School    @relation(fields: [schoolId], references: [id], onDelete: Cascade) // Cascade on delete
  schoolId   String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String    @unique

  createdAt                DateTime                   @default(now()) // Created timestamp
  updatedAt                DateTime                   @updatedAt // Updated timestamp
  TeacherDocument          TeacherDocument[] // Documents related to the teacher
  TeacherAttendance        TeacherAttendance[] // Teacher attendance records
  TeacherLeave             TeacherLeave[] // Teacher leave records
  TeacherSubjectAllocation TeacherSubjectAllocation[]

  @@map("teachers") // Custom table name for the teacher table
}

model TeacherSubjectAllocation {
  id          String  @id @default(cuid())
  teacherId   String
  teacher     Teacher @relation(fields: [teacherId], references: [id])
  subjectId   String
  subject     Subject @relation(fields: [subjectId], references: [id])
  classId     String // JSS 1, JSS 2, etc.
  sectionId   String // A, B, C, etc.
  teacherName String
  teacherImg  String
  subjectName String
  className   String
  sectionName String

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade) // Cascade on delete
  schoolId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teacher_subject_allocations")
}

model TeacherDocument {
  id        String  @id @default(cuid())
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  documentType String // E.g., "NCE", "B.Ed", "ID Proof"
  documentName String
  documentUrl  String
  issueDate    DateTime?
  expiryDate   DateTime?

  isVerified Boolean @default(false)
  remarks    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teacher_documents")
}

model TeacherAttendance {
  id        String  @id @default(cuid())
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  date     DateTime
  checkIn  DateTime?
  checkOut DateTime?
  status   String    @default("Present") // Present, Absent, Late, Half Day

  remarks String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teacherId, date])
  @@map("teacher_attendances")
}

model TeacherLeave {
  id        String  @id @default(cuid())
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  leaveType String // E.g., "Sick", "Casual", "Maternity"
  startDate DateTime
  endDate   DateTime

  duration Float   @default(1.0) // in days
  reason   String?

  status     String  @default("Pending") // Pending, Approved, Rejected
  approvedBy String? // ID of admin/manager who approved

  remarks String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teacher_leaves")
}
